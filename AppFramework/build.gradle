apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'//应用GreenDao数据库插件，不使用GreenDao数据库，将其删除
//apply plugin: 'com.neenbedankt.android-apt'//Butterknife注解插件，不使用Butterknife注解插件就删除
apply plugin: 'com.jakewharton.butterknife'//Butterknife注解插件，不使用Butterknife注解插件就删除   library时必须有
apply plugin: 'AndResGuard'//微信7zip压缩，资源混淆。。。v2签名会使得7zip压缩失效，如果你对apk大小有极致的要求，可以在signingConfigs中关闭v2签名


android {
    dataBinding {
        enabled = true
    }
    useLibrary 'org.apache.http.legacy'//用volley时需要
    //更改生成的apk名字
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    def date = new Date().format("yyyyMMddHHmm")
    boolean hasFlavors = flavors.size() > 0
//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def fileName = hasFlavors ? "${project.name}-${buildType.name}-${defaultConfig.versionName}-${defaultConfig.versionCode}" + "-${variant.flavorName}" + ".apk"
//                    : "${project.name}-${buildType.name}-${defaultConfig.versionName}-${defaultConfig.versionCode}" + ".apk"
////            delete(output.outputFile.parent)//删除apk文件夹
//            output.outputFile = new File(output.outputFile.parent, fileName)
//        }
//    }
    //以下为渠道打包
//    productFlavors {
//        company {}
//        baidu {}
//        my360 {}
//        yingyongbao {}
//        duomeng {}
//        wandoujia {}
//        sina {}
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
//    }


    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    // tinker recommend
    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        applicationId "com.demo.demo"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        //todo 修改版本或者使用Tinker功能时需要修改versionName
        versionName "1.0.000000000000"
//        versionName "1.0." + "${date}"
        // dex突破65536的限制
        multiDexEnabled true
        resConfigs "zh"

        ndk {///使用ndk
            moduleName "ndktest"         //生成的so名字
            abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。目前可有可无。
        }

        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    //以下为签名打包
    signingConfigs {
        // your debug keystore
//        debug {
//            storeFile file("AppFramework.jks")
//            storePassword "123456"
//            keyAlias "com.demo.appframework"
//            keyPassword "123456"
//            v1SigningEnabled true
//            v2SigningEnabled true
//        }
        release {
            try {
                storeFile file("AppFramework.jks")
                storePassword "123456"
                keyAlias "com.demo.appframework"
                keyPassword "123456"
                v1SigningEnabled true
                v2SigningEnabled true
            } catch (Exception e) {
            }
        }
//        release {
//            try {
//                storeFile file(System.console().readLine("\n 请输入   .jks文件名： "))
//                storePassword new String(System.console().readPassword("\n 请输入   storePassword： "))
//                keyAlias System.console().readLine("\n\$ 请输入   keyAlias： ")
//                keyPassword new String(System.console().readPassword("\n 请输入   keyPassword： "))
//                v1SigningEnabled true
//                v2SigningEnabled true
//            } catch (Exception e) {
//            }
//        }
    }
    //打包apk配置
    buildTypes {
//        debug {
//            // 不显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "false"
//            //混淆
//            minifyEnabled true
//            //Zipalign优化
//            zipAlignEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.debug
//        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets.main {//解决NDK报错的
        jni.srcDirs = []
    }
    //greendao 版本设置//应用GreenDao数据库插件，不使用GreenDao数据库，将其删除
    greendao {
        schemaVersion 1
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.3.1'
    //ok3网络请求
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    //GreenDao数据库插件，不使用GreenDao数据库，将其删除
    compile 'org.greenrobot:greendao:3.2.0'
    //butterknife注解
//    compile 'com.jakewharton:butterknife:8.4.0'
//    apt 'com.jakewharton:butterknife-compiler:8.4.0'

    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    //glide加载图片
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //jsoup java抓包html
    compile 'org.jsoup:jsoup:1.10.3'
    //cardview
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile project(':Libraries:Library-EventBus')
    compile project(':Libraries:Library-Pulltorefresh')
    compile project(':Libraries:Library-Videoview')
    compile project(':Libraries:Library-FrameworkFramework')
    compile project(':Libraries:Library-Loadingview')
    compile project(':Libraries:Library-MPAndroidChart')
    compile project(':Libraries:Library-Emoji')
    compile project(':Libraries:Library-SlideFinish')
    //    //三方百分比
    //    compile 'com.zhy:percent-support-extends:1.1.1'
    compile project(':Libraries:Library-PercentLayout')
    /** tinker   */
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //tinker
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    //tinker
    compile 'com.android.support:multidex:1.0.1'
    //tinker--multidex
    //use to test multiDex
    //    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    //    compile "org.scala-lang:scala-library:2.11.7"
    //use for local maven test
    //    compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
    //    compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
    //    compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
    //    compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
    compile files('libs/ClipPicView_noSource.jar')
    compile files('libs/open_sdk_r5788_lite.jar')
    //微信授权登录
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
    compile files('libs/tbs_sdk_thirdapp_v3.2.0.1104_43200_sharewithdownload_withfilereader_withoutGame_obfs_20170609_115346.jar')
}

//微信7zip压缩，资源混淆。。。v2签名会使得7zip压缩失效，如果你对apk大小有极致的要求，可以在signingConfigs中关闭v2签名
andResGuard {
    //todo 使用Tinker需要上一次的mappingFile
    //Tinker时需要mappingFile
    mappingFile = file("${buildDir}/bakApk/resguard/AppFramework-release-2017-06-09_14-24-06-resource_mapping.txt")
//    mappingFile = null

    // It will be invalid when you sign apk with schemeV2
    use7zip = true
    useSign = true
    // it will keep the origin path of your resources when it's true
    keepRoot = false
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for umeng update
            "R.string.umeng*",
            "R.string.UM*",
            "R.string.tb_*",
            "R.layout.umeng*",
            "R.layout.tb_*",
            "R.drawable.umeng*",
            "R.drawable.tb_*",
            "R.anim.umeng*",
            "R.color.umeng*",
            "R.color.tb_*",
            "R.style.*UM*",
            "R.style.umeng*",
            "R.id.umeng*",
            // umeng share for sina
            "R.drawable.sina*",
            // for google-services.json
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.3'
        //path = "/usr/local/bin/7za"
    }
}

/**tinker*/
def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        gitRev = "testTinkerId_" + "${android.defaultConfig.versionName}";
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}
/**tinker*/
def javaVersion = JavaVersion.VERSION_1_7


def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = false //todo:取消tinker可以使用 instant run
    //todo andResGuard--mappingFile = file("${buildDir}/bakApk/resguard/AppFramework-release-2017-06-09_14-00-15-resource_mapping.txt")//Tinker时需要mappingFile
    //for normal build 用了7zip需要添加/resguard，否则不加
    //old apk file to build patch apk   = "${bakPath}/app-debug-2017-06-08_14-16-11.apk"
    tinkerOldApkPath = "${bakPath}/resguard/AppFramework-release-2017-06-09_14-24-06.apk"
    //proguard mapping file to build patch apk   = "${bakPath}/app-debug-2017-06-08_14-16-11-mapping.apk"
    tinkerApplyMappingPath = "${bakPath}/resguard/AppFramework-release-2017-06-09_14-24-06-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed   ="${bakPath}/app-debug-2017-06-08_14-16-11-R.apk"
    tinkerApplyResourcePath = "${bakPath}/resguard/AppFramework-release-2017-06-09_14-24-06-R.txt"

    //only use for build all flavor, if not, just ignore this field  ="${bakPath}/app-debug-2017-06-08_14-16-11"
    tinkerBuildFlavorDirectory = "${bakPath}/app-debug-2017-06-08_14-16-11"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false
        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             */
            isProtectedApp = false
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
//Tinker添加"r/*"

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.2.3"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("yyyy-MM-dd_HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            /**<---以下  我的Tinker添加7zip   我的Tinker添加7zip------------------->*/
            if (variant.buildType.name == 'release') {
                if ("tinkerPatch${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                    // find resguard task
                    def resguardTask
                    tasks.all {
                        if (it.name.startsWith("resguard")) {
                            resguardTask = it
                        }
                    }
                    it.doFirst({
                        // change build apk path
                        it.buildApkPath = "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}_aligned_signed.apk"
                    })
                    // change task dependence to resguard task
                    it.dependsOn resguardTask
                }

                if (it.name.contains("resguard")) {
                    it.doLast {
                        copy {
                            from "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/${project.getName()}-${taskName}_aligned_signed.apk"
                            into file(bakPath.absolutePath + "/resguard")
                            rename { String fileName ->
                                fileName.replace("${project.getName()}-${taskName}_aligned_signed.apk", "${project.getName()}-${taskName}-${date}.apk")
                            }

                            from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                            into file(bakPath.absolutePath + "/resguard")
                            rename { String fileName ->
                                fileName.replace("mapping.txt", "${project.getName()}-${taskName}-${date}-mapping.txt")
                            }

                            from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                            into file(bakPath.absolutePath + "/resguard")
                            rename { String fileName ->
                                fileName.replace("R.txt", "${project.getName()}-${taskName}-${date}-R.txt")
                            }
                            from "${buildDir}/outputs/apk/AndResGuard_${project.getName()}-${taskName}/resource_mapping_${project.getName()}-release.txt"
                            into file(bakPath.absolutePath + "/resguard")
                            rename { String fileName ->
                                fileName.replace("resource_mapping_${project.getName()}-release.txt", "${project.getName()}-${taskName}-${date}-resource_mapping.txt")
                            }
                        }
                    }
                }
            }
            /**<---以上  我的Tinker添加7zip   我的Tinker添加7zip------------------->*/

            /**<---以下Tinker无7zip复制备份发到bakApk------------------------------->*/
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}", "${newFileNamePrefix}")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
            /**<---以上Tinker无7zip复制备份发到bakApk------------------------------->*/
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}/**以上tinker*/