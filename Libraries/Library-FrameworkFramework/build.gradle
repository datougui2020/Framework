apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'//library上传到JitPack

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}



//生成jar包--自定义
task makeJar2(type: org.gradle.api.tasks.bundling.Jar) {
    delete 'build/libs'

    baseName 'mySDK'

    from('build/intermediates/classes/release/','build/intermediates/bundles/default/assets')
    //千万注意，这里 的into空着就行，不然在你的jar包中会多一层目录
    into('')
    //不想要的文件统统exclude,//include ,exclude参数来设置过滤

//    include('classes.jar')

    exclude('android')

    exclude('**/R.class')

    exclude('**/BuildConfig.class')

    exclude { it.name.startsWith('R$'); }
}
makeJar2.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar2


//Copy类型--class.jar
task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs'
    //设置拷贝的文件
//    from('build/intermediates/bundles/releaase/')
    from('build/intermediates/bundles/default/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename('classes.jar', 'mySDK.jar')
}

makeJar.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar

