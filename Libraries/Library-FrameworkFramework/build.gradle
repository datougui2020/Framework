apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'//library上传到JitPack
group = 'com.github.mengxiangqipa'//替换成你的Github的用户名

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api rootProject.ext.androidX.recyclerView
    /*appcompat*/
    api rootProject.ext.androidX.appcompat
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

//生成jar包--自定义(会排出引用jar的class)
task makeJar2(type: org.gradle.api.tasks.bundling.Jar) {
    delete 'build/libs'

    baseName 'mySDK'

    from('build/intermediates/classes/release/', 'build/intermediates/bundles/default/assets')
    //千万注意，这里 的into空着就行，不然在你的jar包中会多一层目录
    into('')
    //不想要的文件统统exclude,//include ,exclude参数来设置过滤

//    include('classes.jar')

    exclude('android')

    exclude('**/R.class')

    exclude('**/BuildConfig.class')

    exclude { it.name.startsWith('R$'); }
}
makeJar2.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar2

//Copy类型--class.jar
task makeJar(type: Copy) {
    //删除存在的
    delete 'build/outputs/jar'
    //设置拷贝的文件
//    from('build/intermediates/bundles/releaase/')
    from('build/intermediates/bundles/default/')
    //打进jar包后的文件目录
    into('build/outputs/jar/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename('classes.jar', 'mySDK.jar')
}

makeJar.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar

//以下上传jitPack 生成注释需要 ---------------------------------------------
// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
//以上  上传jitPack 生成注释需要 ---------------------------------------------}


task aar {//AS3.0之后需要产生aar，直接在Teraminal里面输入 gradlew aar
    //也可以在AS--Build下选择Make Module xxx
}
aar.dependsOn(build)
repositories {
    mavenCentral()
}